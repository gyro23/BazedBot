import logging
import pymongo
from aiogram import Bot, Dispatcher, executor, types
import random
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import time
from datetime import datetime, timedelta
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled
import psycopg2
import urllib.parse as up
import os
from datetime import datetime, timedelta
from asyncio import sleep
from aiogram.dispatcher.filters.filters import BoundFilter, Filter
from aiogram.dispatcher import DEFAULT_RATE_LIMIT
from aiogram.dispatcher.handler import CancelHandler, current_handler
from psycopg2.extensions import AsIs
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import Throttled
from dotenv import load_dotenv
from aiogram.utils.markdown import *
load_dotenv()
global xxc
global zxc
zxc = os.getenv("API_TOKEN")
print(zxc)
xxc = os.getenv("DATABASE_URL")
logging.basicConfig(level=logging.INFO)
bot = Bot(token=zxc)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

up.uses_netloc.append("postgres")
url = up.urlparse(xxc)
conn = psycopg2.connect(database=url.path[1:],
                        user=url.username,
                        password=url.password,
                        host=url.hostname,
                        port=url.port
                        )
cursor = conn.cursor()

async def anti_flood(*args, **kwargs):
    m = args[0]
    await m.reply("–ù–µ —Å–ø–∞–º —Ö—É–π–ª–æ. –ê —Ç–æ—á–Ω—ñ—à–µ –ø–æ—á–µ–∫–∞–π 10 —Å–µ–∫")
@dp.message_handler(commands=['xc'])
async def enable(message: types.Message):
    print(xxc)


@dp.message_handler(commands=['beb'])
async def add_money(message: types.Message):
    usrid = message.from_user.id
    name = message.from_user.first_name
    nameuser = message.from_user.username
    cursor.execute("SELECT date_game FROM mone_game WHERE user_id = %s", [usrid])
    resultgamedate = cursor.fetchone()
    g = [0, 1, 2, 3, 1, 2, 3]
    l = ''
    resultdate = datetime.now().replace(hour = 0, minute= 0,second=0, microsecond=0)
    v = ''
    add_bebra = random.choice(g)
    cursor.execute('SELECT money_quantity FROM mone_game WHERE user_id = %s',(usrid, ))
    result_money = cursor.fetchone()
    if random.randint(0,100) < 8:
        add_bebra = add_bebra + 10
    try:
        for gamedate in resultgamedate:
            if add_bebra == 1:
                v = '–±–µ–±—Äy.'
            else:
                v = '–±–µ–±—Ä.'
            if resultdate == gamedate:
                await message.reply("üè™üè™üè™ –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–≤–æ—ó –±–µ–±—Ä–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞")
            else:
                cursor.execute('INSERT into mone_game (user_id, name, nameuser, money_quantity, date_game) VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET (money_quantity, date_game) = (mone_game.money_quantity + %s, %s) WHERE mone_game.user_id = %s  ;', (usrid, name, nameuser, add_bebra, resultdate, add_bebra, resultdate, usrid ))
                conn.commit()
                cursor.execute('SELECT money_quantity FROM mone_game WHERE user_id = %s', (usrid, ))
                result_money = cursor.fetchone()
                for money in result_money:
                    if money == 1:
                        l = '–±–µ–±—Ä–∞.'
                    elif money <= 4:
                        l = '–±–µ–±—Ä–∏.'
                    else:
                        l = '–±–µ–±—Ä.'
                    if add_bebra == 0:
                        await message.reply( "üè™‚õì –í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –ë–µ–±—Ä–æ–±–∞–Ω–∫—ñ! –í–∏ –Ω—ñ—á–∏–º –Ω–µ –ø—Ä–∏—Å–ª—É–∂–∏–ª–∏—Å—è –∞–ª—å—è–Ω—Å—É. –ë–µ–±—Ä–æ–±–∞–Ω–∫ –≤–∞–º –Ω—ñ—á–æ–≥–æ –ø–ª–∞—Ç–∏—Ç–∏ –Ω–µ –±—É–¥–µ. –ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É " + str(money) + ' '+ str(l) + " –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!")
                    elif add_bebra > 3:
                        await message.reply("üè™ üÜòüÜòüÜò –í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –ë–µ–±—Ä–æ–±–∞–Ω–∫—ñ! –í–∞–º —Å—å–æ–≥–æ–¥–Ω—ñ —â–∞—Å—Ç–∏—Ç—å! –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –≤–∏–ø–ª–∞—Ç—É –≤ "   + str(add_bebra) +' ' + str(v) +' –¢–µ–ø–µ—Ä –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É ' + str(money) + ' ' + str(l)+ " –î–æ –∑–∞–≤—Ç—Ä–∞!")
                    else:
                        await message.reply("üè™ –í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –ë–µ–±—Ä–æ–±–∞–Ω–∫—ñ! –£ –≤–∞—Å –Ω–∞ " + str(add_bebra) + ' –±—ñ–ª—å—à–µ ' + ' '+ str(v) +' –¢–µ–ø–µ—Ä –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É ' + str(money) + ' '+ str(l) + ' –î–æ –∑–∞–≤—Ç—Ä–∞!')
    except:
        cursor.execute('INSERT into mone_game (user_id, name, nameuser, money_quantity, date_game) VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET (money_quantity, date_game) = (mone_game.money_quantity + %s, %s) WHERE mone_game.user_id = %s  ;', (usrid, name, nameuser, add_bebra, resultdate, add_bebra, resultdate, usrid ))
        conn.commit()
        cursor.execute('SELECT money_quantity FROM mone_game WHERE user_id = %s', (usrid, ))
        result_money = cursor.fetchone()
        for money in result_money:
            if money == 1:
                l = '–±–µ–±—Ä–∞.'
            elif money <= 4:
                l = '–±–µ–±—Ä–∏.'
            else:
                l = '–±–µ–±—Ä.'
            if add_bebra == 1:
                v = '–±–µ–±—Äy.'
            else:
                v = '–±–µ–±—Ä.'
            if add_bebra == 0:
                await message.reply( "üè™‚õì –í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –ë–µ–±—Ä–æ–±–∞–Ω–∫—ñ! –í–∏ –Ω—ñ—á–∏–º –Ω–µ –ø—Ä–∏—Å–ª—É–∂–∏–ª–∏—Å—è –∞–ª—å—è–Ω—Å—É. –ë–µ–±—Ä–æ–±–∞–Ω–∫ –≤–∞–º –Ω—ñ—á–æ–≥–æ –ø–ª–∞—Ç–∏—Ç–∏ –Ω–µ –±—É–¥–µ. –ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É " + str(money) + ' '+ str(l) + " –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!")
            elif add_bebra > 3:
                await message.reply("üè™ üÜòüÜòüÜò –í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –ë–µ–±—Ä–æ–±–∞–Ω–∫—ñ! –í–∞–º —Å—å–æ–≥–æ–¥–Ω—ñ —â–∞—Å—Ç–∏—Ç—å! –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –≤–∏–ø–ª–∞—Ç—É –≤ "   + str(add_bebra) +' ' + str(v) +'. –¢–µ–ø–µ—Ä –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É ' + str(money) + ' ' + str(l)+ " –î–æ –∑–∞–≤—Ç—Ä–∞!")
            else:
                await message.reply("üè™ –í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –ë–µ–±—Ä–æ–±–∞–Ω–∫—ñ! –£ –≤–∞—Å –Ω–∞ " + str(add_bebra) + ' –±—ñ–ª—å—à–µ ' + ' '+ str(v) +' –¢–µ–ø–µ—Ä –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É ' + str(money) + ' '+ str(l) + ' –î–æ –∑–∞–≤—Ç—Ä–∞!')
        
        
        
@dp.message_handler(commands=['bebry'])
async def add_mone(message: types.Message):
    usrid = message.from_user.id
    name = message.from_user.first_name
    nameuser = message.from_user.username
    
    try:
        cursor.execute('SELECT money_quantity FROM mone_game WHERE user_id = %s', (usrid,))
        result_money = cursor.fetchone()
        l = ''
        for money in result_money:
            if money == 1:
                l = '–±–µ–±—Ä–∞.'
            elif money <= 4:
                l = '–±–µ–±—Ä–∏.'
            else:
                l = '–±–µ–±—Ä.'

            await message.reply("üè™üè™üè™ –í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –ë–µ–±—Ä–æ–±–∞–Ω–∫—ñ! –ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É " + str(money) + ' ' + str(l))
    except TypeError:
        await message.reply('–¢–∏ –Ω–µ –≤ –≥—Ä—ñ, –ø—Ä–æ–ø–∏—à–∏ /beb')


@dp.message_handler(commands=['top_bebr'])
async def top_money(message: types.Message):
    usrid = message.from_user.id
    name = message.from_user.first_name
    nameuser = message.from_user.username
    baa = ['–ë–∞–≥–∞—á—ñ –ë–µ–±—Ä–æ–±–∞–Ω–∫—É:\n']
    cursor.execute('SELECT name, money_quantity FROM mone_game ORDER BY money_quantity DESC LIMIT 15')
    result_money = cursor.fetchall()
    n = 1
    for money in result_money:
        bal = (str(n) + ' - ' + str(money[0]) + " –º–∞—î " + str(money[1]) + ' –±–µ–±—Ä.')
        baa.append(bal)
        n += 1
    await message.reply('\n'.join(baa))
    

@dp.message_handler(regexp=r"–±–∞–∑–∏–∫ –∑–±—ñ—Ä")
async def top(message: types.Message):
    usrid = message.from_user.id
    chat_id = message.chat.id
    cursor.execute("SELECT usr_id FROM whitelist WHERE usr_id = %s", (usrid,))
    user = cursor.fetchone()
    try:
        for us in user:
            if usrid == us:
                x = await bot.get_chat_member(chat_id=chat_id)
                print(x)
    except:
        None


@dp.message_handler(regexp=r"–±–∞–∑–∏–∫ –¥—É–ø–∞|–±–∞–∑–∏–∫ —Å—Ä–∞–∫–∞")
@dp.throttled(anti_flood, rate=10)
async def send(message: types.Message):
    up.uses_netloc.append("postgres")
    url = up.urlparse(xxc)
    cursor.execute('SELECT photka FROM zhopu ORDER BY random() LIMIT 1')
    result_photo = cursor.fetchone()
    usrid = message.from_user.id
    
    await message.reply('–ü–∞—Ä—É —Å–µ–∫—É–Ω–¥')
    await sleep(3)
    cursor.execute("SELECT usr_id FROM whitelist WHERE usr_id = %s", (usrid,))
    idq = cursor.fetchone()
    global q 
    q = 15

    try:
        for idq—ñ in idq:
            print(str(usrid) + ' ' + str(idq—ñ))
            if usrid == int(idq—ñ):
                q += 100
                print('ok')
    except:
        print('cock')
    if random.randint(0, 100) < q:
        print('–∫–∏–Ω—É–≤: ' + result_photo[0])
        await message.reply_photo(photo=result_photo[0], protect_content=True)
    else:
        await message.reply('–ê –∑–Ω–∞—î—à, –ø—ñ—à–æ–≤ —Ç–∏ –Ω–∞—Ö—É–π')
    


@dp.message_handler(regexp=r"–±–∞–∑–∏–∫ –æ–ø–ª–∞—á–µ–Ω–∞ —Å—Ä–∞–∫–∞|–±–∞–∑–∏–∫ –æ–ø–ª–∞—á–µ–Ω–∞ –¥—É–ø–∞")
@dp.throttled(anti_flood, rate=10)
async def send(message: types.Message):
    cursor.execute('SELECT photka FROM zhopu ORDER BY random() LIMIT 1')
    result_photo = cursor.fetchone()
    usrid = message.from_user.id
    
    await message.reply('–ü–∞—Ä—É —Å–µ–∫—É–Ω–¥')
    await sleep(3)
    cursor.execute("SELECT usr_id FROM whitelist WHERE usr_id = %s", (usrid,))
    idq = cursor.fetchone()
    global q
    q = 40

    try:
        for idq—ñ in idq:
            print(usrid + ' ' + idq—ñ)
            if usrid == int(idq—ñ):
                q += 100
                await message.reply('–î–µ–±—ñ–ª —Ç–∏ –≤ –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ. –ê–ª–µ —è–∫—à–æ —Ç–∏ —Ç–∞–∫ —Ö–æ—á–µ—à –ø–æ—Ç—Ä–∞—Ç–∏—Ç–∏ –±–µ–±—Ä–∏, —Ç–æ –ø—Ä–æ—à—É')
                print('ok')

    except:
        None
    cursor.execute("SELECT money_quantity FROM mone_game WHERE user_id = %s", (usrid,))
    fromUSR = cursor.fetchone()    
    for fr in fromUSR:
        if fr[0] < 5:
            await message.reply('–¢—Ä–µ–±–∞ –º–∞—Ç–∏ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É 5 –±–µ–±—Ä. –£ –≤–∞—Å —ó—Ö –º–µ–Ω—à–µ.')
        else:
            xs = fr[0] - 5
            cursor.execute("UPDATE mone_game SET money_quantity = %s WHERE user_id = %s;", (xs, usrid,))
            conn.commit()
            await message.reply('C–ø–ª–∞—á–µ–Ω–æ 5 –±–µ–±—Ä')
            print('–∫–∏–Ω—É–≤: ' + result_photo[0])
            await message.reply_photo(photo=result_photo[0], protect_content=True)
    

@dp.callback_query_handler(text='btn1')
async def redact(call: types.CallbackQuery):
    callid = call.from_user.id
    if usrid == callid:
        result_money = cursor.execute("SELECT money_quantity from mone_game WHERE user_id = %s;", (callid,))
        result_money = cursor.fetchone()
        vb = random.randint(5, 10)
        try:
            for money in result_money:
                if money < 5:
                    await call.message.edit_text('–ë–æ–º–∂–∞–º –≤ –ë–µ–±—Ä–æ–ö–∞–∑–∏–Ω–æ –Ω–µ —Ä–∞–¥—ñ. –ù–∞ –≤–∏—Ö—ñ–¥.')
                    return
                else:
                    await bot.answer_callback_query(call.id)
                    await call.message.edit_text('–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ 5 –±–µ–±—Ä')
                    await sleep(4)
                    if random.randint(1, 100) < 50:

                        vg = money + vb
                        cursor.execute("UPDATE mone_game SET money_quantity = %s WHERE user_id = %s;", (vg, callid,))
                        conn.commit()
                        await call.message.edit_text('–¢–æ–±—ñ —â–∞—Å—Ç–∏—Ç—å –≤–∏–ø–∞–≤ –ß–µ—Ä–≤–æ–Ω–∏–πüî¥. –ù–∞—á–∏—Å–ª–µ–Ω–æ +' + str(vb) + ' –±–µ–±—Ä')
                    else:
                        vs = money - 5
                        cursor.execute("UPDATE mone_game SET money_quantity = %s WHERE user_id = %s;", (vs, callid,))
                        conn.commit()
                        await call.message.edit_text('–¢–æ–±—ñ –Ω–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ –≤–∏–ø–∞–≤ –ß–æ—Ä–Ω–∏–π‚ö´. –ß–µ–∫–∞—î–º–æ —á–µ—Ä–µ–∑ 6 –≥–æ–¥–∏–Ω')
        except TypeError:
            await call.message.edit_text("–í–∏ –Ω–µ –≤ –≥—Ä—ñ –ø—Ä–æ–ø–∏—à—ñ—Ç—å '/beb'. –Ü —Å–ø—Ä–æ–±—É–π—Ç–µ —â–∞—Å—Ç—è —á–µ—Ä–µ–∑ 6 –≥–æ–¥–∏–Ω")                
    else:
        await call.answer('–ù–µ —Ç–∏ –≤–∏–∫–ª–∏–∫–∞–≤ –ë–µ–±—Ä–æ–ö–∞–∑–∏–Ω–æ, –Ω–∞ –≤–∏—Ö—ñ–¥', show_alert=True)
    
        


@dp.callback_query_handler(text='btn2')
async def redct(call: types.CallbackQuery):
    callid = call.from_user.id
    if usrid == callid:
        cursor.execute("SELECT money_quantity from mone_game WHERE user_id = %s;", (callid,))
        result_money = cursor.fetchone()
        await bot.answer_callback_query(call.id)

        vb = random.randint(5, 10)
        try:
            for money in result_money:
                if money < 5:
                    await call.message.edit_text('–ë–æ–º–∂–∞–º –≤ –ë–µ–±—Ä–æ–ö–∞–∑–∏–Ω–æ –Ω–µ —Ä–∞–¥—ñ. –ù–∞ –≤–∏—Ö—ñ–¥.')
                    return
                else:
                    await call.message.edit_text('–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ 5 –±–µ–±—Ä')
                    await sleep(4)
                    if random.randint(1, 100) < 50:

                        vg = money + vb
                        cursor.execute("UPDATE mone_game SET money_quantity = %s WHERE user_id = %s;", (vg, callid,))
                        conn.commit()
                        await call.message.edit_text('–¢–æ–±—ñ —â–∞—Å—Ç–∏—Ç—å –≤–∏–ø–∞–≤ –ß–æ—Ä–Ω–∏–π‚ö´Ô∏è. –ù–∞—á–∏—Å–ª–µ–Ω–æ +' + str(vb) + ' –±–µ–±—Ä')
                    else:

                        vs = money - 5
                        cursor.execute("UPDATE mone_game SET money_quantity = %s WHERE user_id = %s;", (vs, callid,))
                        conn.commit()
                        await call.message.edit_text('–¢–æ–±—ñ –Ω–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ –≤–∏–ø–∞–≤ –ß–µ—Ä–≤–æ–Ω–∏–πüî¥. –ß–µ–∫–∞—î–º–æ —á–µ—Ä–µ–∑ 6 –≥–æ–¥–∏–Ω')
        except TypeError:
            await call.message.edit_text("–í–∏ –Ω–µ –≤ –≥—Ä—ñ –ø—Ä–æ–ø–∏—à—ñ—Ç—å '/beb'. –Ü —Å–ø—Ä–æ–±—É–π—Ç–µ —â–∞—Å—Ç—è —á–µ—Ä–µ–∑ 6 –≥–æ–¥–∏–Ω")                

    else:
        await call.answer('–ù–µ —Ç–∏ –≤–∏–∫–ª–∏–∫–∞–≤ –ë–µ–±—Ä–æ–ö–∞–∑–∏–Ω–æ, –Ω–∞ –≤–∏—Ö—ñ–¥', show_alert=True)
   


@dp.message_handler(regexp=r"–±–∞–∑–∏–∫ –∫–∞–∑–∏–Ω–æ")
async def kazino(message: types.Message):
    resultdate = datetime.now().replace(minute=0, second=0, microsecond=0)
    global usrid
    usrid = message.from_user.id
    global q
    cursor.execute("SELECT game_time FROM kazino WHERE usr_id = %s", [usrid])
    resultgamedate = cursor.fetchone()
    try:
        for date in resultgamedate:
            final_time = date + timedelta(hours=6)
            print(final_time > date)
            print(final_time)
            
            if final_time > resultdate:    
                await message.reply("–ó–∞–ª–∏—à–∏–ª–æ—Å—è 6 –≥–æ–¥–∏–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ")
            else:
                q = random.randint(1, 2)
                sx = InlineKeyboardButton('–ß–µ—Ä–≤–æ–Ω–∏–πüî¥', callback_data='btn1')
                sw = InlineKeyboardButton('–ß–æ—Ä–Ω–∏–π‚ö´Ô∏è', callback_data='btn2')
                okk = InlineKeyboardMarkup(row_width=1, resize_keyboard=True, ).add(sw, sx)
                sa = '–í—ñ—Ç–∞—î–º–æ –≤ –ë–µ–±—Ä–æ–ö–∞–∑–∏–Ω–æ'
                print(q)
                await message.reply(sa, reply_markup=okk)
                cursor.execute('INSERT into kazino (usr_id, game_time) VALUES (%s, %s) ON CONFLICT (usr_id) DO UPDATE SET game_time = %s WHERE kazino.usr_id = %s;', (usrid, resultdate, resultdate, usrid, ))
                conn.commit()
    except:
        q = random.randint(1, 2)
        sx = InlineKeyboardButton('–ß–µ—Ä–≤–æ–Ω–∏–πüî¥', callback_data='btn1')
        sw = InlineKeyboardButton('–ß–æ—Ä–Ω–∏–π‚ö´Ô∏è', callback_data='btn2')
        okk = InlineKeyboardMarkup(row_width=1, resize_keyboard=True, ).add(sw, sx)
        sa = '–í—ñ—Ç–∞—î–º–æ –≤ –ë–µ–±—Ä–æ–ö–∞–∑–∏–Ω–æ'
        print(q)
        await message.reply(sa, reply_markup=okk)       
        cursor.execute('INSERT into kazino (usr_id, game_time) VALUES (%s, %s) ON CONFLICT (usr_id) DO UPDATE SET game_time = %s WHERE kazino.usr_id = %s;', (usrid, resultdate, resultdate, usrid, ))
        conn.commit()
@dp.message_handler(commands='add_photo')
async def scan_message(message: types.Message):
    usrid = message.from_user.id
    ff = message.reply_to_message.photo[-1].file_id

    if usrid == 578408714:
        print('–¥–æ–¥–∞–≤: ' + ff)
        cursor.execute("INSERT into zhopu (photka) VALUES (%s);", (ff,))
        conn.commit()
        await message.reply('–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ')
        
    else:
        await message.reply(':| 0===3\n:() 0===3\n:()==3\n:()=3 \n:3')


@dp.message_handler(commands='add_white')
async def add_white(message: types.Message):
    usrid = message.from_user.id
    usreid = message.reply_to_message.from_user.id
    nameuser = message.reply_to_message.from_user.first_name
    if usrid == 578408714:
        cursor.execute("INSERT into whitelist (usr_id, username) VALUES (%s, %s);", (usreid, nameuser,))
        conn.commit()
        await message.reply('–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ')
        
    else:
        await message.reply(':| 0===3\n:() 0===3\n:()==3\n:()=3 \n:3')


@dp.message_handler(commands='whites')
async def white(message: types.Message):
    usrid = message.from_user.id
    cursor.execute("SELECT usr_id FROM whitelist WHERE usr_id = %s", (usrid, ))
    idq = cursor.fetchone()
    for idqi in idq:
        print(str(usrid) +  ' ' + idqi)
        if usrid == int(idqi):
            cursor.execute("SELECT username FROM whitelist ORDER BY usr_id DESC")
            ids = cursor.fetchall()
            baa = ['üïçüïçüïç –õ–µ–≥–µ–Ω–¥–∏:\n']
            for idiy in ids:
                k = idiy[0]
                print(k)
                bal = (' - ' + str(idiy[0]))
                baa.append(bal)
            print(*baa)
            await message.reply('\n'.join(baa))
            conn.commit()

        else:
            await message.reply('–π–¥–∏ –Ω–∞—Ö—É–π')

    


@dp.message_handler(commands='add_chmo')
async def rusak(message: types.Message):
    usrid = message.from_user.id
    texts = message.reply_to_message.text
    if usrid == 578408714:

        print(texts)
        cursor.execute("INSERT into rusaku (texts) VALUES (%s);", (texts,))
        conn.commit()
        await message.reply('–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ')
        
    else:
        await message.reply(':| 0===3\n:() 0===3\n:()==3\n:()=3 \n:3')

@dp.message_handler(commands='pay')
async def whit(message: types.Message):
    usrid = message.from_user.id
    userid = message.from_user.username
    usreid = message.reply_to_message.from_user.id
    nameuser = message.reply_to_message.from_user.first_name
    username = message.from_user.first_name
    try:
        cursor = conn.cursor()
        a = message.text.split()
        b = a[1]
        cursor.execute("SELECT money_quantity, name FROM mone_game WHERE user_id = %s", (usrid,))
        fromUSR = cursor.fetchall()
        cursor.execute("SELECT money_quantity, name FROM mone_game WHERE user_id = %s", (usreid,))
        toUSR = cursor.fetchall()
        cursor.execute("SELECT user_id  FROM mone_game WHERE name = %s", (nameuser,))
        xUS = cursor.fetchall()
        print(xUS)
        for money in fromUSR:
            for groshi in toUSR:
                for gx in xUS:
                    sa = money[0] - int(a[1])
                    asa = groshi[0] + int(a[1])
                    print(str(gx[0]) + ' ' + str(money[1]) + ' ' + str(groshi[1]))
                    if sa < 0 or money[0] < 0:
                        await message.reply("üïç –Ü–¥–∏ –Ω–∞—Ö—É–π –∂–∏–¥")
                    elif int(gx[0]) == int(usrid):
                        xo = ['–°—Ç–∞–Ω—å –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º —ñ –ø–æ–¥—Ä–æ—á–∏ –Ω–∞ —Å–µ–±–µ, –∑—Ä–æ–∑—É–º—ñ–ª–æ –ø–æ—è—Å–Ω–∏–≤? üïç',
                              "–¢–∏ –¥–µ–±—ñ–ª —á–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏–∫–∏–¥–∞—î—à—Å—è? ‚ö°Ô∏è"]
                        await message.reply(random.choice(xo))
                    elif int(a[1]) <= 0:
                        await message.reply("üïçüïçüïç –ô–¥–∏ –≤ –ø–µ–∑–¥—É –∂–∏–¥ —Ç—É–ø–∏–π")
                    else:
                        cursor.execute("UPDATE mone_game SET money_quantity = %s WHERE user_id = %s;", (sa, usrid,))
                        conn.commit()
                        cursor.execute("UPDATE mone_game SET money_quantity = %s WHERE user_id = %s;", (asa, usreid,))
                        conn.commit()

                        if int(a[1]) == 1:
                            await message.reply('üèß‚ö°Ô∏è ' + money[1] + " –ø–µ—Ä–µ–≤—ñ–≤ " + groshi[1] + ' ' + a[1] + ' –±–µ–±—Äy.')
                        elif int(a[1]) <= 4:
                            await message.reply('üèß‚ö°Ô∏è ' + money[1] + " –ø–µ—Ä–µ–≤—ñ–≤ " + groshi[1] + ' ' + a[1] + ' –±–µ–±—Ä–∏.')
                        else:
                            await message.reply('üèß‚ö°Ô∏è ' + money[1] + " –ø–µ—Ä–µ–≤—ñ–≤ " + groshi[1] + ' ' + a[1] + ' –±–µ–±—Ä.')
    except TypeError:
        await message.reply('–¢–∏ –Ω–µ –≤ –≥—Ä—ñ, –ø—Ä–æ–ø–∏—à–∏ /beb')


@dp.message_handler()
async def send_welcome(message: types.Message):
    
    if random.randint(0, 100) < 2:
        baza = ['–¢—Ä—É—à–Ω–æ', '–ù–µ —Ç—Ä—É—à–Ω–æ', '–ë–∞–∑–∞', '–•—É—è–∑–∞']
        await message.reply(random.choice(baza))

    baz = ['CAACAgIAAxkBAAEEGq9iKgNHYU0xMkuKXtChybqa_WRWOwACxhUAAr8KGEuTt1d3LkE_vyME',
           'CAACAgIAAxkBAAEEGrBiKgNIUltzuUglZYcUaEbfvv9oJwACqAADfpo8IFurssjtFkOIIwQ',
           'CAACAgIAAxkBAAEEGrFiKgNIvhsNe4cDChsZFWfK8pjOeAACAgADEYgpK9WpgMrSMMByIwQ']

    if random.randint(0, 100) < 2:
        await message.reply_sticker(sticker=random.choice(baz))

    if "—Ö—É—è–∑–∞" in message.text or "–•—É—è–∑–∞" in message.text:
        await message.reply("–ü—à–æ–≤ –Ω–∞—Ö—É–π —Ö–ª–æ–ø")

    oo = ["–•—É—è–∑–∞", "–ê–∑–æ–≤—É?"]
    if "–ë–∞–∑–∞" in message.text or "–±–∞–∑–∞" in message.text:
        await message.reply(random.choice(oo))

    if "–≤‚ú°Ô∏è–≤–∞" in message.text:
        await message.reply("—Ç–∞–∫ –≤—ñ–Ω –ø—ñ–¥–∞—Ä")

    if message.text == "–¥–∞" or message.text == "–î–∞":
        await message.reply("–ü—ñ–∑–¥–∞")
    op = ['–í –∂–æ–ø—ñ –æ–≥—ñ—Ä–æ–∫', '–í –ø–∏–∑–¥—ñ –±—Ä—É—Å–æ–∫', '–í –Ω–æ—Å—ñ –Ω–æ—Å–æ–∫', '–•—É–π–æ–∫', '–í —à–ª—É–Ω–∫—É –∫–æ–ª–æ–±–æ–∫', '–°–∞–ª–∞ —à–º–∞—Ç–æ–∫',
          '–ù–∞—Å—Ä–∏ –≤ –º—ñ—à–æ–∫', '–ü—É–ø–æ–∫', '–õ–∏—Å–∏–π –ø—ñ–¥–∞—Ä–æ–∫', '–¢–∏ –º—ñ–π –ø—ñ–¥–∞—Ä–æ–∫']
    if message.text == "–û–∫" or message.text == "–æ–∫":
        await message.reply(random.choice(op))
    if '–ë–∞–∑–∏–∫ —Ä—É—Å–Ω—è' in message.text or '–±–∞–∑–∏–∫ —Ä—É—Å–Ω—è' in message.text:
        usrid = message.from_user.id
        txt = message.reply_to_message
        ok = False
        cursor.execute("SELECT usr_id FROM whitelist WHERE usr_id = %s", (usrid,))
        dq = cursor.fetchone()
        try:
            for idq in dq:
                print(str(usrid) + ' ' + str(idq))
                if str(usrid) == str(idq):
                    ok = True
        except:
            None
        if ok == True:
            xz = cursor.execute("SELECT texts FROM rusaku ORDER BY random() LIMIT 1")
            xz = cursor.fetchone()
            for xx in xz:
                await txt.reply(xx)
        else:
            await message.reply(':| 0===3\n:() 0===3\n:()==3\n:()=3 \n:3')
        


if __name__ == '__main__':
    
    executor.start_polling(dp, skip_updates=True)
